using System.Threading.Tasks;
using Telegram.Bot.Types;
using MultiUserLocalization;
using Telegram.Bot.Types.ReplyMarkups;
using PasswordManager.Bot.Commands.Enums;
using System;
using System.Text;
using Telegram.Bot.Types.Enums;
using System.Linq;
using PasswordManager.Application;
using PasswordManager.Bot.Models;
using PasswordManager.Bot.Commands.Abstractions;
using PasswordManager.Bot.Services.Abstractions;
using PasswordManager.Application.Services.Abstractions;
using PasswordManager.Core.Entities;

namespace PasswordManager.Bot.Commands; 

public class SetUpPasswordGeneratorCommand : Abstractions.BotCommand, IMessageCommand, IActionCommand, ICallbackQueryCommand {
	private readonly IUserService userService;
	private readonly IBotUi botUi;

	public SetUpPasswordGeneratorCommand(IBot bot, IUserService userService, IBotUi botUi) : base(bot) {
		this.userService = userService;
		this.botUi = botUi;
	}

	async Task IActionCommand.ExecuteAsync(Message message, BotUser botUser) {
		if (botUser.Action != UserAction.SetUpPasswordGeneratorLength) {
			await SendGeneratorSettings(botUser, message);
		} else {
			try {
				int length = Convert.ToInt32(message.Text);
				if(length > Account.MaxPasswordLength) {
					await Bot.Client.SendTextMessageAsync(message.From.Id,
						"⛓️ " + String.Format(Localization.GetMessage("EnterLength", botUser.Lang), Account.MaxPasswordLength));
					return;
				}
				string passwordGeneratorPattern = await userService.GetPasswordGeneratorPattern(botUser.Id);
				//todo move logic of changing pattern to user service
				passwordGeneratorPattern = passwordGeneratorPattern[..6] + length;
				await userService.UpdatePasswordGeneratorPattern(botUser.Id, passwordGeneratorPattern);
				await userService.UpdateActionAsync(botUser.Id, UserAction.Search);
				await SendGeneratorSettings(botUser, message);
			}
			catch(Exception) {
				await Bot.Client.SendTextMessageAsync(message.From.Id,
					"⛓️ " + String.Format(Localization.GetMessage("WrongLength", botUser.Lang), Account.MaxPasswordLength));
			}
		}
			
	}

	//todo move this to botUi
	async Task SendGeneratorSettings(BotUser botUser, Message message) {
		string passwordGeneratorPattern = await userService.GetPasswordGeneratorPattern(botUser.Id);
		string messageText = await GetMessageText(botUser, passwordGeneratorPattern);
		InlineKeyboardMarkup keyboard = botUi.GetPasswordGeneratorSettingsKeyboard(botUser, passwordGeneratorPattern);
		await Bot.Client.SendTextMessageAsync(message.From.Id, messageText, replyMarkup: keyboard, parseMode: ParseMode.MarkdownV2);
	}

	private async Task<string> GetMessageText(BotUser botUser, string passwordGeneratorPattern) {
		string password;
			
		//todo move this to botUserService or somewhere else
		try {
			password = passwordGeneratorPattern.GeneratePasswordByPattern();
		}
		catch (ArgumentException) {
			// Default password generator pattern will be set to user and a password will be generated by it
			await SetPasswordPatternToDefault(botUser);
			password = Password.DefaultPasswordGeneratorPattern.GeneratePasswordByPattern();
		}

		//todo move this to botUserService or somewhere else
		if(password.Length > Account.MaxPasswordLength) {
			// Default password generator pattern will be set to user and a password will be generated by it
			await SetPasswordPatternToDefault(botUser);
			password = Password.DefaultPasswordGeneratorPattern.GeneratePasswordByPattern();
		}
			
		return "🛠 " + String.Format(Localization.GetMessage("SetUpPassword", botUser.Lang),
			$"\n\n{botUi.GetPasswordMessage(password)}");
	}

	async Task ICallbackQueryCommand.ExecuteAsync(CallbackQuery callbackQuery, BotUser botUser) {
		await Bot.Client.AnswerCallbackQueryAsync(callbackQuery.Id);
		string passwordGeneratorPattern = await userService.GetPasswordGeneratorPattern(botUser.Id);

		//todo move this to botUserService or somewhere else
		StringBuilder sb = new StringBuilder(passwordGeneratorPattern[..6]);
		if((SetUpPasswordGeneratorCommandCode)callbackQuery.Data[1] != SetUpPasswordGeneratorCommandCode.Length &&
			(SetUpPasswordGeneratorCommandCode)callbackQuery.Data[1] != SetUpPasswordGeneratorCommandCode.Generate &&
			callbackQuery.Data[2] == '0') {
			//todo explain what is this
			string genString = sb.ToString().Remove(4, 1);
			if (genString.Count(x => x == '1') <= 1)
				return;
		}
		switch ((SetUpPasswordGeneratorCommandCode)callbackQuery.Data[1]) {
			case SetUpPasswordGeneratorCommandCode.ContainsLowerChars:
				sb[0] = callbackQuery.Data[2];
				if(sb[0] == '0' && sb[1] == '0')
					sb[4] = '0';
				break;

			case SetUpPasswordGeneratorCommandCode.ContainsUpperChars:
				sb[1] = callbackQuery.Data[2];
				if (sb[0] == '0' && sb[1] == '0')
					sb[4] = '0';
				break;

			case SetUpPasswordGeneratorCommandCode.ContainsDigits:
				sb[2] = callbackQuery.Data[2];
				break;

			case SetUpPasswordGeneratorCommandCode.FirstCharIsLetter:
				if (callbackQuery.Data[2] == '0' || (callbackQuery.Data[2] != '0' && (sb[0] != '0' || sb[1] != '0')))
					sb[4] = callbackQuery.Data[2];
				else
					return;
				break;

			case SetUpPasswordGeneratorCommandCode.ContainsSpecialChars:
				sb[3] = callbackQuery.Data[2];
				break;

			case SetUpPasswordGeneratorCommandCode.ContainsSpace:
				sb[5] = callbackQuery.Data[2];
				break;

			case SetUpPasswordGeneratorCommandCode.Length:
				await Bot.Client.EditMessageTextAsync(callbackQuery.Message.Chat.Id, callbackQuery.Message.MessageId,
					"⛓️ " + String.Format(Localization.GetMessage("EnterLength", botUser.Lang), Account.MaxPasswordLength));
				await userService.UpdateActionAsync(botUser.Id, UserAction.SetUpPasswordGeneratorLength);
				return;
		}

		passwordGeneratorPattern = sb + passwordGeneratorPattern[6..];
		await userService.UpdatePasswordGeneratorPattern(botUser.Id, passwordGeneratorPattern);
			
		//todo move this to botUi
		string messageText = await GetMessageText(botUser, passwordGeneratorPattern);
		var keyboard = botUi.GetPasswordGeneratorSettingsKeyboard(botUser, passwordGeneratorPattern);
		await Bot.Client.EditMessageTextAsync(callbackQuery.Message.Chat.Id,
			callbackQuery.Message.MessageId, messageText, replyMarkup: keyboard, parseMode: ParseMode.MarkdownV2);

	}

	async Task IMessageCommand.ExecuteAsync(Message message, BotUser botUser) => await SendGeneratorSettings(botUser, message);

	//todo move this to botUserService or somewhere else
	private async Task SetPasswordPatternToDefault(BotUser botUser) {
		await userService.UpdatePasswordGeneratorPattern(botUser.Id, Password.DefaultPasswordGeneratorPattern);
		await Bot.Client.SendTextMessageAsync(botUser.Id, Localization.GetMessage("PasswordGeneratorPatternToDefault", botUser.Lang));
	}

}